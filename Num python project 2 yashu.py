{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "2afaef76",
   "metadata": {},
   "source": [
    "# Project"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c3796ca0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d6926a04",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Provided data\n",
    "data =np.array([\n",
    "  \n",
    "    [13, 31, 15, 27, 8, 32, 8, 23, 8, 31, 15, 26, 11, 30],\n",
    "    [11, 25, 12, 23, 6, 22, -13, 26, 7, 24, 10, 31, 8, 32],\n",
    "    [13, 28, 15, 27, 11, 26, 6, 23, 6, 31, 13, 21, 15, 30],\n",
    "    [8, 27, 13, 30, 14, 22, 9, 23, 13, 30, 9, 24, 15, 20],\n",
    "    [8, 32, 13, 24, 14, 27, 8, 30, 15, 20, 10, 27, 11, 21],\n",
    "    [14, 28, 6, 20, 14, 22, 11, 25, 6, 22, 14, 29, 10, 23],\n",
    "    [8, 21, 13, 23, 14, 28, 9, 23, 11, 27, 11, 30, 10, 27],\n",
    "    [12, 28, 7, 20, 14, 28, 11, 23, 9, 28, 9, 27, 14, 28],\n",
    "    [4, 20, 6, 22, 4, 19, 7, 20, 2, 22, 2, 7, 22, 3],\n",
    "    [6, 19, 8, 20, 2, 18, 5, 22, 6, 18, 2, 5, 20, 7],\n",
    "    [8, 21, 7, 20, 3, 18, 8, 20, 3, 22, 6, 4, 19, 7],\n",
    "    [3, 22, 2, 19, 4, 19, 4, 18, 5, 18, 5, 6, 19, 4],\n",
    "    [8, 21, 11, 18, -10, 19, 8, 20, 11, 18, 12, 71, 20, 7],\n",
    "    [7, 22, 12, 21, 9, 19, 10, 19, 9, 19, 11, 9, 19, 10],\n",
    "    [11, 22, 7, 22, 10, 21, 12, 20, 7, 20, 11, 12, 19, 11],\n",
    "    [8, 21, 10, 21, 8, 19, 8, 18, 9, 20, 7, 11, 20, 10]\n",
    "]).reshape(4,4,7,2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "bf464e91",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[[8 32]\n",
      "   [13 24]\n",
      "   [14 27]\n",
      "   [8 30]\n",
      "   [15 20]\n",
      "   [10 27]\n",
      "   [11 21]]\n",
      "\n",
      "  [[14 28]\n",
      "   [6 20]\n",
      "   [14 22]\n",
      "   [11 25]\n",
      "   [6 22]\n",
      "   [14 29]\n",
      "   [10 23]]\n",
      "\n",
      "  [[8 21]\n",
      "   [13 23]\n",
      "   [14 28]\n",
      "   [9 23]\n",
      "   [11 27]\n",
      "   [11 30]\n",
      "   [10 27]]\n",
      "\n",
      "  [[12 28]\n",
      "   [7 20]\n",
      "   [14 28]\n",
      "   [11 23]\n",
      "   [9 28]\n",
      "   [9 27]\n",
      "   [14 28]]]\n",
      "\n",
      "\n",
      " [[[4 20]\n",
      "   [6 22]\n",
      "   [4 19]\n",
      "   [7 20]\n",
      "   [2 22]\n",
      "   [2 7]\n",
      "   [22 3]]\n",
      "\n",
      "  [[6 19]\n",
      "   [8 20]\n",
      "   [2 18]\n",
      "   [5 22]\n",
      "   [6 18]\n",
      "   [2 5]\n",
      "   [20 7]]\n",
      "\n",
      "  [[8 21]\n",
      "   [7 20]\n",
      "   [3 18]\n",
      "   [8 20]\n",
      "   [3 22]\n",
      "   [6 4]\n",
      "   [19 7]]\n",
      "\n",
      "  [[3 22]\n",
      "   [2 19]\n",
      "   [4 19]\n",
      "   [4 18]\n",
      "   [5 18]\n",
      "   [5 6]\n",
      "   [19 4]]]\n",
      "\n",
      "\n",
      " [[[8 21]\n",
      "   [11 18]\n",
      "   [-10 19]\n",
      "   [8 20]\n",
      "   [11 18]\n",
      "   [12 71]\n",
      "   [20 7]]\n",
      "\n",
      "  [[7 22]\n",
      "   [12 21]\n",
      "   [9 19]\n",
      "   [10 19]\n",
      "   [9 19]\n",
      "   [11 9]\n",
      "   [19 10]]\n",
      "\n",
      "  [[11 22]\n",
      "   [7 22]\n",
      "   [10 21]\n",
      "   [12 20]\n",
      "   [7 20]\n",
      "   [11 12]\n",
      "   [19 11]]\n",
      "\n",
      "  [[8 21]\n",
      "   [10 21]\n",
      "   [8 19]\n",
      "   [8 18]\n",
      "   [9 20]\n",
      "   [7 11]\n",
      "   [20 10]]]]\n"
     ]
    }
   ],
   "source": [
    "numpy_array = np.array(data[1:],dtype=object)\n",
    "print(numpy_array)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "387c7826",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3, 4, 7, 2)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numpy_array.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3e30b16a",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Month: 1, Day: 1, Min Temp: 13, Max Temp: 31\n",
      "Month: 1, Day: 2, Min Temp: 15, Max Temp: 27\n",
      "Month: 1, Day: 3, Min Temp: 8, Max Temp: 32\n",
      "Month: 1, Day: 4, Min Temp: 8, Max Temp: 23\n",
      "Month: 1, Day: 5, Min Temp: 8, Max Temp: 31\n",
      "Month: 1, Day: 6, Min Temp: 15, Max Temp: 26\n",
      "Month: 1, Day: 7, Min Temp: 11, Max Temp: 30\n",
      "Month: 2, Day: 1, Min Temp: 8, Max Temp: 32\n",
      "Month: 2, Day: 2, Min Temp: 13, Max Temp: 24\n",
      "Month: 2, Day: 3, Min Temp: 14, Max Temp: 27\n",
      "Month: 2, Day: 4, Min Temp: 8, Max Temp: 30\n",
      "Month: 2, Day: 5, Min Temp: 15, Max Temp: 20\n",
      "Month: 2, Day: 6, Min Temp: 10, Max Temp: 27\n",
      "Month: 2, Day: 7, Min Temp: 11, Max Temp: 21\n",
      "Month: 3, Day: 1, Min Temp: 4, Max Temp: 20\n",
      "Month: 3, Day: 2, Min Temp: 6, Max Temp: 22\n",
      "Month: 3, Day: 3, Min Temp: 4, Max Temp: 19\n",
      "Month: 3, Day: 4, Min Temp: 7, Max Temp: 20\n",
      "Month: 3, Day: 5, Min Temp: 2, Max Temp: 22\n",
      "Month: 3, Day: 6, Min Temp: 2, Max Temp: 7\n",
      "Month: 3, Day: 7, Min Temp: 22, Max Temp: 3\n",
      "Month: 4, Day: 1, Min Temp: 8, Max Temp: 21\n",
      "Month: 4, Day: 2, Min Temp: 11, Max Temp: 18\n",
      "Month: 4, Day: 3, Min Temp: -10, Max Temp: 19\n",
      "Month: 4, Day: 4, Min Temp: 8, Max Temp: 20\n",
      "Month: 4, Day: 5, Min Temp: 11, Max Temp: 18\n",
      "Month: 4, Day: 6, Min Temp: 12, Max Temp: 71\n",
      "Month: 4, Day: 7, Min Temp: 20, Max Temp: 7\n"
     ]
    }
   ],
   "source": [
    "for month_idx in range(4):  # Iterate through each month\n",
    "    for day_idx in range(7):  # Iterate through each day\n",
    "        min_temp = data[month_idx, 0, day_idx, 0]\n",
    "        max_temp = data[month_idx, 0, day_idx, 1]\n",
    "        print(f\"Month: {month_idx + 1}, Day: {day_idx + 1}, Min Temp: {min_temp}, Max Temp: {max_temp}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ac92c77d",
   "metadata": {},
   "outputs": [],
   "source": [
    "numpy_array = np.array(data[1:], dtype=object)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ff20ee3d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[[8 32]\n",
      "   [13 24]\n",
      "   [14 27]\n",
      "   [8 30]\n",
      "   [15 20]\n",
      "   [10 27]\n",
      "   [11 21]]\n",
      "\n",
      "  [[14 28]\n",
      "   [6 20]\n",
      "   [14 22]\n",
      "   [11 25]\n",
      "   [6 22]\n",
      "   [14 29]\n",
      "   [10 23]]\n",
      "\n",
      "  [[8 21]\n",
      "   [13 23]\n",
      "   [14 28]\n",
      "   [9 23]\n",
      "   [11 27]\n",
      "   [11 30]\n",
      "   [10 27]]\n",
      "\n",
      "  [[12 28]\n",
      "   [7 20]\n",
      "   [14 28]\n",
      "   [11 23]\n",
      "   [9 28]\n",
      "   [9 27]\n",
      "   [14 28]]]\n",
      "\n",
      "\n",
      " [[[4 20]\n",
      "   [6 22]\n",
      "   [4 19]\n",
      "   [7 20]\n",
      "   [2 22]\n",
      "   [2 7]\n",
      "   [22 3]]\n",
      "\n",
      "  [[6 19]\n",
      "   [8 20]\n",
      "   [2 18]\n",
      "   [5 22]\n",
      "   [6 18]\n",
      "   [2 5]\n",
      "   [20 7]]\n",
      "\n",
      "  [[8 21]\n",
      "   [7 20]\n",
      "   [3 18]\n",
      "   [8 20]\n",
      "   [3 22]\n",
      "   [6 4]\n",
      "   [19 7]]\n",
      "\n",
      "  [[3 22]\n",
      "   [2 19]\n",
      "   [4 19]\n",
      "   [4 18]\n",
      "   [5 18]\n",
      "   [5 6]\n",
      "   [19 4]]]\n",
      "\n",
      "\n",
      " [[[8 21]\n",
      "   [11 18]\n",
      "   [-10 19]\n",
      "   [8 20]\n",
      "   [11 18]\n",
      "   [12 71]\n",
      "   [20 7]]\n",
      "\n",
      "  [[7 22]\n",
      "   [12 21]\n",
      "   [9 19]\n",
      "   [10 19]\n",
      "   [9 19]\n",
      "   [11 9]\n",
      "   [19 10]]\n",
      "\n",
      "  [[11 22]\n",
      "   [7 22]\n",
      "   [10 21]\n",
      "   [12 20]\n",
      "   [7 20]\n",
      "   [11 12]\n",
      "   [19 11]]\n",
      "\n",
      "  [[8 21]\n",
      "   [10 21]\n",
      "   [8 19]\n",
      "   [8 18]\n",
      "   [9 20]\n",
      "   [7 11]\n",
      "   [20 10]]]]\n"
     ]
    }
   ],
   "source": [
    "print(numpy_array)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "98577e9f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Month: 1, Week: 1, Tuesday Min Temp: 15, Tuesday Max Temp: 27\n",
      "Month: 1, Week: 2, Tuesday Min Temp: 12, Tuesday Max Temp: 23\n",
      "Month: 1, Week: 3, Tuesday Min Temp: 15, Tuesday Max Temp: 27\n",
      "Month: 1, Week: 4, Tuesday Min Temp: 13, Tuesday Max Temp: 30\n",
      "Month: 2, Week: 1, Tuesday Min Temp: 13, Tuesday Max Temp: 24\n",
      "Month: 2, Week: 2, Tuesday Min Temp: 6, Tuesday Max Temp: 20\n",
      "Month: 2, Week: 3, Tuesday Min Temp: 13, Tuesday Max Temp: 23\n",
      "Month: 2, Week: 4, Tuesday Min Temp: 7, Tuesday Max Temp: 20\n",
      "Month: 3, Week: 1, Tuesday Min Temp: 6, Tuesday Max Temp: 22\n",
      "Month: 3, Week: 2, Tuesday Min Temp: 8, Tuesday Max Temp: 20\n",
      "Month: 3, Week: 3, Tuesday Min Temp: 7, Tuesday Max Temp: 20\n",
      "Month: 3, Week: 4, Tuesday Min Temp: 2, Tuesday Max Temp: 19\n",
      "Month: 4, Week: 1, Tuesday Min Temp: 11, Tuesday Max Temp: 18\n",
      "Month: 4, Week: 2, Tuesday Min Temp: 12, Tuesday Max Temp: 21\n",
      "Month: 4, Week: 3, Tuesday Min Temp: 7, Tuesday Max Temp: 22\n",
      "Month: 4, Week: 4, Tuesday Min Temp: 10, Tuesday Max Temp: 21\n"
     ]
    }
   ],
   "source": [
    "for month_idx in range(4):  # Iterate through each month\n",
    "    for week_idx in range(4):  # Iterate through each week\n",
    "        min_temp = data[month_idx, week_idx, 1, 0]\n",
    "        max_temp = data[month_idx, week_idx, 1, 1]\n",
    "        print(f\"Month: {month_idx + 1}, Week: {week_idx + 1}, Tuesday Min Temp: {min_temp}, Tuesday Max Temp: {max_temp}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "82ec0c88",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Month: 2 (December or February)\n",
      "Week: 1, Day: 1, Max Temp: 32\n",
      "Week: 1, Day: 2, Max Temp: 24\n",
      "Week: 1, Day: 3, Max Temp: 27\n",
      "Week: 1, Day: 4, Max Temp: 30\n",
      "Week: 1, Day: 5, Max Temp: 20\n",
      "Week: 2, Day: 1, Max Temp: 28\n",
      "Week: 2, Day: 2, Max Temp: 20\n",
      "Week: 2, Day: 3, Max Temp: 22\n",
      "Week: 2, Day: 4, Max Temp: 25\n",
      "Week: 2, Day: 5, Max Temp: 22\n",
      "Week: 3, Day: 1, Max Temp: 21\n",
      "Week: 3, Day: 2, Max Temp: 23\n",
      "Week: 3, Day: 3, Max Temp: 28\n",
      "Week: 3, Day: 4, Max Temp: 23\n",
      "Week: 3, Day: 5, Max Temp: 27\n",
      "Week: 4, Day: 1, Max Temp: 28\n",
      "Week: 4, Day: 2, Max Temp: 20\n",
      "Week: 4, Day: 3, Max Temp: 28\n",
      "Week: 4, Day: 4, Max Temp: 23\n",
      "Week: 4, Day: 5, Max Temp: 28\n",
      "Month: 3 (December or February)\n",
      "Week: 1, Day: 1, Max Temp: 20\n",
      "Week: 1, Day: 2, Max Temp: 22\n",
      "Week: 1, Day: 3, Max Temp: 19\n",
      "Week: 1, Day: 4, Max Temp: 20\n",
      "Week: 1, Day: 5, Max Temp: 22\n",
      "Week: 2, Day: 1, Max Temp: 19\n",
      "Week: 2, Day: 2, Max Temp: 20\n",
      "Week: 2, Day: 3, Max Temp: 18\n",
      "Week: 2, Day: 4, Max Temp: 22\n",
      "Week: 2, Day: 5, Max Temp: 18\n",
      "Week: 3, Day: 1, Max Temp: 21\n",
      "Week: 3, Day: 2, Max Temp: 20\n",
      "Week: 3, Day: 3, Max Temp: 18\n",
      "Week: 3, Day: 4, Max Temp: 20\n",
      "Week: 3, Day: 5, Max Temp: 22\n",
      "Week: 4, Day: 1, Max Temp: 22\n",
      "Week: 4, Day: 2, Max Temp: 19\n",
      "Week: 4, Day: 3, Max Temp: 19\n",
      "Week: 4, Day: 4, Max Temp: 18\n",
      "Week: 4, Day: 5, Max Temp: 18\n"
     ]
    }
   ],
   "source": [
    "# Access the maximum temperatures for weekdays of December and February\n",
    "months_to_print = [1, 2]  # Indexes 1 and 2 represent December and February\n",
    "\n",
    "for month_idx in months_to_print:\n",
    "    print(f\"Month: {month_idx + 1} (December or February)\")\n",
    "    for week_idx in range(4):  # Iterate through each week\n",
    "        for day_idx in range(5):  # Iterate through each weekday (Monday to Friday)\n",
    "            max_temp = data[month_idx, week_idx, day_idx, 1]\n",
    "            print(f\"Week: {week_idx + 1}, Day: {day_idx + 1}, Max Temp: {max_temp}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "ddc7e0c9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Days in November with Min Temp < 8 degrees:\n",
      "Week: 2, Day: 3\n",
      "Week: 2, Day: 4\n",
      "Week: 2, Day: 5\n",
      "Week: 3, Day: 4\n",
      "Week: 3, Day: 5\n"
     ]
    }
   ],
   "source": [
    "# Access the days in November with min temp less than 8 degrees\n",
    "month_idx = 0  # November is the first month (index 0)\n",
    "\n",
    "print(\"Days in November with Min Temp < 8 degrees:\")\n",
    "for week_idx in range(4):  # Iterate through each week\n",
    "    for day_idx in range(7):  # Iterate through each day\n",
    "        min_temp = data[month_idx, week_idx, day_idx, 0]\n",
    "        if min_temp < 8:\n",
    "            print(f\"Week: {week_idx + 1}, Day: {day_idx + 1}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "831c1eca",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Weeks in Month 2 (December or January) with Max Temp > 20 degrees:\n",
      "Week: 1\n",
      "Week: 2\n",
      "Week: 3\n",
      "Week: 4\n",
      "Weeks in Month 3 (December or January) with Max Temp > 20 degrees:\n",
      "Week: 1\n",
      "Week: 2\n",
      "Week: 3\n",
      "Week: 4\n"
     ]
    }
   ],
   "source": [
    "# Access the weeks in December and January with max temp > 20 degrees\n",
    "months_to_print = [1, 2]  # Indexes 1 and 2 represent December and January\n",
    "threshold = 20  # Temperature threshold\n",
    "\n",
    "for month_idx in months_to_print:\n",
    "    print(f\"Weeks in Month {month_idx + 1} (December or January) with Max Temp > {threshold} degrees:\")\n",
    "    for week_idx in range(4):  # Iterate through each week\n",
    "        max_temp_week = data[month_idx, week_idx, :, 1]  # Max temps for the week\n",
    "        if any(temp > threshold for temp in max_temp_week):\n",
    "            print(f\"Week: {week_idx + 1}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "40156e59",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Absurd temperature values found:\n",
      "Month: 4, Week: 1, Day: 6, Max Temp: 71\n"
     ]
    }
   ],
   "source": [
    "# Define a range of valid temperature values (example: -50 to 50 degrees Celsius)\n",
    "valid_min_temp = -50\n",
    "valid_max_temp = 50\n",
    "\n",
    "# Check for absurd values in the dataset\n",
    "absurd_values = []\n",
    "\n",
    "for month_idx in range(4):\n",
    "    for week_idx in range(4):\n",
    "        for day_idx in range(7):\n",
    "            min_temp = data[month_idx, week_idx, day_idx, 0]\n",
    "            max_temp = data[month_idx, week_idx, day_idx, 1]\n",
    "            \n",
    "            if min_temp < valid_min_temp or min_temp > valid_max_temp:\n",
    "                absurd_values.append(f\"Month: {month_idx + 1}, Week: {week_idx + 1}, Day: {day_idx + 1}, Min Temp: {min_temp}\")\n",
    "                \n",
    "            if max_temp < valid_min_temp or max_temp > valid_max_temp:\n",
    "                absurd_values.append(f\"Month: {month_idx + 1}, Week: {week_idx + 1}, Day: {day_idx + 1}, Max Temp: {max_temp}\")\n",
    "\n",
    "# Print absurd values\n",
    "if absurd_values:\n",
    "    print(\"Absurd temperature values found:\")\n",
    "    for value in absurd_values:\n",
    "        print(value)\n",
    "else:\n",
    "    print(\"No absurd temperature values found.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "848b3858",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Indexes of outlier values:\n",
      "Month: 4, Week: 1, Day: 6, Value Type: Max Temp\n"
     ]
    }
   ],
   "source": [
    "#10 Define a range of valid temperature values (example: -50 to 50 degrees Celsius)\n",
    "valid_min_temp = -50\n",
    "valid_max_temp = 50\n",
    "\n",
    "# Find and print the indexes of outlier values in the dataset\n",
    "outlier_indexes = []\n",
    "\n",
    "for month_idx in range(4):\n",
    "    for week_idx in range(4):\n",
    "        for day_idx in range(7):\n",
    "            min_temp = data[month_idx, week_idx, day_idx, 0]\n",
    "            max_temp = data[month_idx, week_idx, day_idx, 1]\n",
    "            \n",
    "            if min_temp < valid_min_temp or min_temp > valid_max_temp:\n",
    "                outlier_indexes.append((month_idx, week_idx, day_idx, 0))\n",
    "                \n",
    "            if max_temp < valid_min_temp or max_temp > valid_max_temp:\n",
    "                outlier_indexes.append((month_idx, week_idx, day_idx, 1))\n",
    "\n",
    "# Print outlier indexes\n",
    "if outlier_indexes:\n",
    "    print(\"Indexes of outlier values:\")\n",
    "    for index in outlier_indexes:\n",
    "        print(f\"Month: {index[0] + 1}, Week: {index[1] + 1}, Day: {index[2] + 1}, Value Type: {'Min Temp' if index[3] == 0 else 'Max Temp'}\")\n",
    "else:\n",
    "    print(\"No outlier values found.\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f0903a24",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "import numpy as np\n",
    "\n",
    "# Replace outliers with median temperature value\n",
    "for month_idx in range(4):\n",
    "    for week_idx in range(4):\n",
    "        for day_idx in range(7):\n",
    "            min_temp = data[month_idx, week_idx, day_idx, 0]\n",
    "            max_temp = data[month_idx, week_idx, day_idx, 1]\n",
    "            \n",
    "            if min_temp < valid_min_temp or min_temp > valid_max_temp:\n",
    "                median_min_temp = np.median(data[month_idx, week_idx, :, 0])\n",
    "                data[month_idx, week_idx, day_idx, 0] = median_min_temp\n",
    "                \n",
    "            if max_temp < valid_min_temp or max_temp > valid_max_temp:\n",
    "                median_max_temp = np.median(data[month_idx, week_idx, :, 1])\n",
    "                data[month_idx, week_idx, day_idx, 1] = median_max_temp\n",
    "\n",
    "                "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "3219979a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average Max Temperature for Winter Months: 19.52 degrees Celsius\n"
     ]
    }
   ],
   "source": [
    "#12 Define the indices for winter months (December, January, February)\n",
    "winter_months = [1, 2, 3]  # Indexes 11, 0, and 1 represent December, January, and February\n",
    "\n",
    "# Calculate the average max temperature for winter months\n",
    "total_max_temp = 0\n",
    "count = 0\n",
    "\n",
    "for month_idx in winter_months:\n",
    "    for week_idx in range(4):\n",
    "        for day_idx in range(7):\n",
    "            max_temp = data[month_idx, week_idx, day_idx, 1]\n",
    "            total_max_temp += max_temp\n",
    "            count += 1\n",
    "\n",
    "average_max_temp = total_max_temp / count\n",
    "\n",
    "print(f\"Average Max Temperature for Winter Months: {average_max_temp:.2f} degrees Celsius\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "54b309a0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Week 1 - Average Min Temperature: 11.14 degrees Celsius\n",
      "Week 2 - Average Min Temperature: 5.86 degrees Celsius\n",
      "Week 3 - Average Min Temperature: 11.29 degrees Celsius\n",
      "Week 4 - Average Min Temperature: 11.57 degrees Celsius\n"
     ]
    }
   ],
   "source": [
    "# Calculate the weekly minimum average temperature for the month of December\n",
    "december_index = 0  # Index 0 represents December\n",
    "\n",
    "for week_idx in range(4):\n",
    "    total_min_temp = 0\n",
    "    count = 0\n",
    "\n",
    "    for day_idx in range(7):\n",
    "        min_temp = data[december_index, week_idx, day_idx, 0]\n",
    "        total_min_temp += min_temp\n",
    "        count += 1\n",
    "\n",
    "    average_min_temp = total_min_temp / count\n",
    "    print(f\"Week {week_idx + 1} - Average Min Temperature: {average_min_temp:.2f} degrees Celsius\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "e9122cf0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Overall Average Temperature for December and January: 18.22 degrees Celsius\n"
     ]
    }
   ],
   "source": [
    "# Calculate the overall average temperature for the months of December and January\n",
    "months_to_average = [0, 1]  # Indexes 0 and 1 represent December and January\n",
    "\n",
    "total_temp_sum = 0\n",
    "total_days = 0\n",
    "\n",
    "for month_idx in months_to_average:\n",
    "    for week_idx in range(4):\n",
    "        for day_idx in range(7):\n",
    "            min_temp = data[month_idx, week_idx, day_idx, 0]\n",
    "            max_temp = data[month_idx, week_idx, day_idx, 1]\n",
    "            \n",
    "            total_temp_sum += (min_temp + max_temp) / 2\n",
    "            total_days += 1\n",
    "\n",
    "overall_avg_temp = total_temp_sum / total_days\n",
    "\n",
    "print(f\"Overall Average Temperature for December and January: {overall_avg_temp:.2f} degrees Celsius\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "19df8e19",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Least Temperature: -13.00 degrees Celsius\n",
      "Date (Day/Week/Month): 4/2/1\n"
     ]
    }
   ],
   "source": [
    "# Initialize variables to store the minimum temperature and its details\n",
    "min_temp = float('inf')\n",
    "min_temp_day = None\n",
    "min_temp_week = None\n",
    "min_temp_month = None\n",
    "\n",
    "# Iterate through the temperature values to find the least temperature\n",
    "for month_idx in [0, 1]:  # Indexes 0 and 1 represent December and January\n",
    "    for week_idx in range(4):\n",
    "        for day_idx in range(7):\n",
    "            current_min_temp = data[month_idx, week_idx, day_idx, 0]\n",
    "            \n",
    "            if current_min_temp < min_temp:\n",
    "                min_temp = current_min_temp\n",
    "                min_temp_day = day_idx + 1\n",
    "                min_temp_week = week_idx + 1\n",
    "                min_temp_month = month_idx + 1\n",
    "\n",
    "print(f\"Least Temperature: {min_temp:.2f} degrees Celsius\")\n",
    "print(f\"Date (Day/Week/Month): {min_temp_day}/{min_temp_week}/{min_temp_month}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "66503398",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Maximum Temperature: 22.00 degrees Celsius\n",
      "Date (Day/Week/Month): 1/2/4\n"
     ]
    }
   ],
   "source": [
    "# Initialize variables to store the maximum temperature and its details\n",
    "max_temp = float('-inf')\n",
    "max_temp_day = None\n",
    "max_temp_week = None\n",
    "max_temp_month = None\n",
    "\n",
    "# Iterate through the temperature values to find the maximum temperature\n",
    "for month_idx in [3]:  # Index 3 represents February\n",
    "    for week_idx in range(4):\n",
    "        for day_idx in range(7):\n",
    "            current_max_temp = data[month_idx, week_idx, day_idx, 1]\n",
    "            \n",
    "            if current_max_temp > max_temp:\n",
    "                max_temp = current_max_temp\n",
    "                max_temp_day = day_idx + 1\n",
    "                max_temp_week = week_idx + 1\n",
    "                max_temp_month = month_idx + 1\n",
    "\n",
    "# Print the maximum temperature and its details\n",
    "print(f\"Maximum Temperature: {max_temp:.2f} degrees Celsius\")\n",
    "print(f\"Date (Day/Week/Month): {max_temp_day}/{max_temp_week}/{max_temp_month}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "e6b538e9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Days in November where max temp dropped below average:\n",
      "Day 4\n",
      "Day 6\n"
     ]
    }
   ],
   "source": [
    "# Calculate the average maximum temperature for the month of November\n",
    "november_index = 0  # Index 0 represents November\n",
    "\n",
    "total_max_temp_november = 0\n",
    "count_november = 0\n",
    "\n",
    "for week_idx in range(4):\n",
    "    for day_idx in range(7):\n",
    "        max_temp = data[november_index, week_idx, day_idx, 1]\n",
    "        total_max_temp_november += max_temp\n",
    "        count_november += 1\n",
    "\n",
    "avg_max_temp_november = total_max_temp_november / count_november\n",
    "\n",
    "# Find the days where max temp dropped below the avg temp of November\n",
    "days_below_avg = []\n",
    "\n",
    "for day_idx in range(7):\n",
    "    max_temp = data[november_index, 0, day_idx, 1]  # Considering only the first week for each day\n",
    "    if max_temp < avg_max_temp_november:\n",
    "        days_below_avg.append(day_idx + 1)  # Adding 1 to convert 0-based index to day number\n",
    "\n",
    "print(\"Days in November where max temp dropped below average:\")\n",
    "for day in days_below_avg:\n",
    "    print(f\"Day {day}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "04e186d3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[ 13  31]\n",
      "  [ 15  27]\n",
      "  [  8  32]\n",
      "  [  8  23]]\n",
      "\n",
      " [[  8  31]\n",
      "  [ 15  26]\n",
      "  [ 11  30]\n",
      "  [  8  32]]\n",
      "\n",
      " [[ 13  24]\n",
      "  [ 14  27]\n",
      "  [  8  30]\n",
      "  [ 15  20]]\n",
      "\n",
      " [[ 10  27]\n",
      "  [ 11  21]\n",
      "  [  4  20]\n",
      "  [  6  22]]\n",
      "\n",
      " [[  4  19]\n",
      "  [  7  20]\n",
      "  [  2  22]\n",
      "  [  2   7]]\n",
      "\n",
      " [[ 22   3]\n",
      "  [  8  21]\n",
      "  [ 11  18]\n",
      "  [-10  19]]\n",
      "\n",
      " [[  8  20]\n",
      "  [ 11  18]\n",
      "  [ 12  19]\n",
      "  [ 20   7]]\n",
      "\n",
      " [[ 11  25]\n",
      "  [ 12  23]\n",
      "  [  6  22]\n",
      "  [-13  26]]\n",
      "\n",
      " [[  7  24]\n",
      "  [ 10  31]\n",
      "  [  8  32]\n",
      "  [ 14  28]]\n",
      "\n",
      " [[  6  20]\n",
      "  [ 14  22]\n",
      "  [ 11  25]\n",
      "  [  6  22]]\n",
      "\n",
      " [[ 14  29]\n",
      "  [ 10  23]\n",
      "  [  6  19]\n",
      "  [  8  20]]\n",
      "\n",
      " [[  2  18]\n",
      "  [  5  22]\n",
      "  [  6  18]\n",
      "  [  2   5]]\n",
      "\n",
      " [[ 20   7]\n",
      "  [  7  22]\n",
      "  [ 12  21]\n",
      "  [  9  19]]\n",
      "\n",
      " [[ 10  19]\n",
      "  [  9  19]\n",
      "  [ 11   9]\n",
      "  [ 19  10]]\n",
      "\n",
      " [[ 13  28]\n",
      "  [ 15  27]\n",
      "  [ 11  26]\n",
      "  [  6  23]]\n",
      "\n",
      " [[  6  31]\n",
      "  [ 13  21]\n",
      "  [ 15  30]\n",
      "  [  8  21]]\n",
      "\n",
      " [[ 13  23]\n",
      "  [ 14  28]\n",
      "  [  9  23]\n",
      "  [ 11  27]]\n",
      "\n",
      " [[ 11  30]\n",
      "  [ 10  27]\n",
      "  [  8  21]\n",
      "  [  7  20]]\n",
      "\n",
      " [[  3  18]\n",
      "  [  8  20]\n",
      "  [  3  22]\n",
      "  [  6   4]]\n",
      "\n",
      " [[ 19   7]\n",
      "  [ 11  22]\n",
      "  [  7  22]\n",
      "  [ 10  21]]\n",
      "\n",
      " [[ 12  20]\n",
      "  [  7  20]\n",
      "  [ 11  12]\n",
      "  [ 19  11]]\n",
      "\n",
      " [[  8  27]\n",
      "  [ 13  30]\n",
      "  [ 14  22]\n",
      "  [  9  23]]\n",
      "\n",
      " [[ 13  30]\n",
      "  [  9  24]\n",
      "  [ 15  20]\n",
      "  [ 12  28]]\n",
      "\n",
      " [[  7  20]\n",
      "  [ 14  28]\n",
      "  [ 11  23]\n",
      "  [  9  28]]\n",
      "\n",
      " [[  9  27]\n",
      "  [ 14  28]\n",
      "  [  3  22]\n",
      "  [  2  19]]\n",
      "\n",
      " [[  4  19]\n",
      "  [  4  18]\n",
      "  [  5  18]\n",
      "  [  5   6]]\n",
      "\n",
      " [[ 19   4]\n",
      "  [  8  21]\n",
      "  [ 10  21]\n",
      "  [  8  19]]\n",
      "\n",
      " [[  8  18]\n",
      "  [  9  20]\n",
      "  [  7  11]\n",
      "  [ 20  10]]]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "# Reshape the data to have weeks as rows and days as columns\n",
    "reshaped_data = data.transpose(1, 0, 2, 3).reshape(4 * 7, 4, 2)\n",
    "\n",
    "print(reshaped_data)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "429cb616",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[[55.4 87.8]\n",
      "   [59.  80.6]\n",
      "   [46.4 89.6]\n",
      "   [46.4 73.4]\n",
      "   [46.4 87.8]\n",
      "   [59.  78.8]\n",
      "   [51.8 86. ]]\n",
      "\n",
      "  [[51.8 77. ]\n",
      "   [53.6 73.4]\n",
      "   [42.8 71.6]\n",
      "   [ 8.6 78.8]\n",
      "   [44.6 75.2]\n",
      "   [50.  87.8]\n",
      "   [46.4 89.6]]\n",
      "\n",
      "  [[55.4 82.4]\n",
      "   [59.  80.6]\n",
      "   [51.8 78.8]\n",
      "   [42.8 73.4]\n",
      "   [42.8 87.8]\n",
      "   [55.4 69.8]\n",
      "   [59.  86. ]]\n",
      "\n",
      "  [[46.4 80.6]\n",
      "   [55.4 86. ]\n",
      "   [57.2 71.6]\n",
      "   [48.2 73.4]\n",
      "   [55.4 86. ]\n",
      "   [48.2 75.2]\n",
      "   [59.  68. ]]]\n",
      "\n",
      "\n",
      " [[[46.4 89.6]\n",
      "   [55.4 75.2]\n",
      "   [57.2 80.6]\n",
      "   [46.4 86. ]\n",
      "   [59.  68. ]\n",
      "   [50.  80.6]\n",
      "   [51.8 69.8]]\n",
      "\n",
      "  [[57.2 82.4]\n",
      "   [42.8 68. ]\n",
      "   [57.2 71.6]\n",
      "   [51.8 77. ]\n",
      "   [42.8 71.6]\n",
      "   [57.2 84.2]\n",
      "   [50.  73.4]]\n",
      "\n",
      "  [[46.4 69.8]\n",
      "   [55.4 73.4]\n",
      "   [57.2 82.4]\n",
      "   [48.2 73.4]\n",
      "   [51.8 80.6]\n",
      "   [51.8 86. ]\n",
      "   [50.  80.6]]\n",
      "\n",
      "  [[53.6 82.4]\n",
      "   [44.6 68. ]\n",
      "   [57.2 82.4]\n",
      "   [51.8 73.4]\n",
      "   [48.2 82.4]\n",
      "   [48.2 80.6]\n",
      "   [57.2 82.4]]]\n",
      "\n",
      "\n",
      " [[[39.2 68. ]\n",
      "   [42.8 71.6]\n",
      "   [39.2 66.2]\n",
      "   [44.6 68. ]\n",
      "   [35.6 71.6]\n",
      "   [35.6 44.6]\n",
      "   [71.6 37.4]]\n",
      "\n",
      "  [[42.8 66.2]\n",
      "   [46.4 68. ]\n",
      "   [35.6 64.4]\n",
      "   [41.  71.6]\n",
      "   [42.8 64.4]\n",
      "   [35.6 41. ]\n",
      "   [68.  44.6]]\n",
      "\n",
      "  [[46.4 69.8]\n",
      "   [44.6 68. ]\n",
      "   [37.4 64.4]\n",
      "   [46.4 68. ]\n",
      "   [37.4 71.6]\n",
      "   [42.8 39.2]\n",
      "   [66.2 44.6]]\n",
      "\n",
      "  [[37.4 71.6]\n",
      "   [35.6 66.2]\n",
      "   [39.2 66.2]\n",
      "   [39.2 64.4]\n",
      "   [41.  64.4]\n",
      "   [41.  42.8]\n",
      "   [66.2 39.2]]]\n",
      "\n",
      "\n",
      " [[[46.4 69.8]\n",
      "   [51.8 64.4]\n",
      "   [14.  66.2]\n",
      "   [46.4 68. ]\n",
      "   [51.8 64.4]\n",
      "   [53.6 66.2]\n",
      "   [68.  44.6]]\n",
      "\n",
      "  [[44.6 71.6]\n",
      "   [53.6 69.8]\n",
      "   [48.2 66.2]\n",
      "   [50.  66.2]\n",
      "   [48.2 66.2]\n",
      "   [51.8 48.2]\n",
      "   [66.2 50. ]]\n",
      "\n",
      "  [[51.8 71.6]\n",
      "   [44.6 71.6]\n",
      "   [50.  69.8]\n",
      "   [53.6 68. ]\n",
      "   [44.6 68. ]\n",
      "   [51.8 53.6]\n",
      "   [66.2 51.8]]\n",
      "\n",
      "  [[46.4 69.8]\n",
      "   [50.  69.8]\n",
      "   [46.4 66.2]\n",
      "   [46.4 64.4]\n",
      "   [48.2 68. ]\n",
      "   [44.6 51.8]\n",
      "   [68.  50. ]]]]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "# Define the conversion function\n",
    "def celsius_to_fahrenheit(celsius_temp):\n",
    "    return (celsius_temp * 9/5) + 32\n",
    "\n",
    "# Convert the original data to Fahrenheit\n",
    "data_fahrenheit = celsius_to_fahrenheit(data)\n",
    "\n",
    "print(data_fahrenheit)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "6b5e1846",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(1, 19.85714286) (3, 18.92857143) (4, 18.35714286) (2, 16.        )]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "# Calculate the weekly average temperatures for the month of December\n",
    "december_index = 0  # Index 0 represents December\n",
    "\n",
    "weekly_averages = []\n",
    "\n",
    "for week_idx in range(4):\n",
    "    total_temp = 0\n",
    "    count = 0\n",
    "    \n",
    "    for day_idx in range(7):\n",
    "        min_temp = data[december_index, week_idx, day_idx, 0]\n",
    "        max_temp = data[december_index, week_idx, day_idx, 1]\n",
    "        total_temp += (min_temp + max_temp) / 2\n",
    "        count += 1\n",
    "    \n",
    "    average_temp = total_temp / count\n",
    "    weekly_averages.append(average_temp)\n",
    "\n",
    "# Create an array with week indices and corresponding average temperatures\n",
    "week_indices = np.arange(1, 5)\n",
    "week_avg_array = np.array(weekly_averages)\n",
    "\n",
    "# Combine the week indices and average temperatures into a structured array\n",
    "combined_array = np.array(list(zip(week_indices, week_avg_array)), dtype=[('week', int), ('average_temp', float)])\n",
    "\n",
    "# Sort the array in descending order based on average temperatures\n",
    "sorted_array = np.sort(combined_array, order='average_temp')[::-1]\n",
    "\n",
    "print(sorted_array)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "7430e372",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(11, 1, 21.        ) (11, 3, 20.        ) (12, 1, 19.66666667)\n",
      " (12, 3, 17.83333333) (12, 2, 17.33333333) (11, 2, 16.5       )\n",
      " (14, 3, 15.5       ) (14, 2, 15.        ) (13, 3, 12.83333333)\n",
      " (13, 1, 12.5       ) (13, 2, 12.16666667) (14, 1, 11.16666667)]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "# Create a list to hold the data for the first three days of each month\n",
    "first_three_days_data = []\n",
    "\n",
    "for month_idx in range(4):\n",
    "    for week_idx in range(4):\n",
    "        for day_idx in range(3):\n",
    "            min_temp = data[month_idx, week_idx, day_idx, 0]\n",
    "            max_temp = data[month_idx, week_idx, day_idx, 1]\n",
    "            first_three_days_data.append((min_temp + max_temp) / 2)\n",
    "\n",
    "# Create an array from the list\n",
    "first_three_days_array = np.array(first_three_days_data)\n",
    "\n",
    "# Reshape the array to have months and days as columns\n",
    "reshaped_array = first_three_days_array.reshape(4, 4, 3)\n",
    "\n",
    "# Calculate the average temperatures for the first three days of each month\n",
    "average_temps = np.mean(reshaped_array, axis=2)\n",
    "\n",
    "# Create a list of tuples containing month, day, and average temp\n",
    "average_temp_list = []\n",
    "for month_idx in range(4):\n",
    "    for day_idx in range(3):\n",
    "        average_temp_list.append((month_idx + 11, day_idx + 1, average_temps[month_idx, day_idx]))\n",
    "\n",
    "# Create a structured array from the list\n",
    "combined_array = np.array(average_temp_list, dtype=[('month', int), ('day', int), ('average_temp', float)])\n",
    "\n",
    "# Sort the array in descending order based on average temperatures\n",
    "sorted_array = np.sort(combined_array, order='average_temp')[::-1]\n",
    "\n",
    "print(sorted_array)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "9a171911",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[ 18  12  24  15  23  11  19]\n",
      "  [ 14  11  16  39  17  21  24]\n",
      "  [ 15  12  15  17  25   8  15]\n",
      "  [ 19  17   8  14  17  15   5]]\n",
      "\n",
      " [[ 24  11  13  22   5  17  10]\n",
      "  [ 14  14   8  14  16  15  13]\n",
      "  [ 13  10  14  14  16  19  17]\n",
      "  [ 16  13  14  12  19  18  14]]\n",
      "\n",
      " [[ 16  16  15  13  20   5 -19]\n",
      "  [ 13  12  16  17  12   3 -13]\n",
      "  [ 13  13  15  12  19  -2 -12]\n",
      "  [ 19  17  15  14  13   1 -15]]\n",
      "\n",
      " [[ 13   7  29  12   7   7 -13]\n",
      "  [ 15   9  10   9  10  -2  -9]\n",
      "  [ 11  15  11   8  13   1  -8]\n",
      "  [ 13  11  11  10  11   4 -10]]]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "# Calculate the difference between min and max temp for each day in all winter months\n",
    "temp_differences = []\n",
    "\n",
    "for month_idx in range(4):  # Iterate through all winter months\n",
    "    for week_idx in range(4):\n",
    "        for day_idx in range(7):  # Iterate through all days of the week\n",
    "            min_temp = data[month_idx, week_idx, day_idx, 0]\n",
    "            max_temp = data[month_idx, week_idx, day_idx, 1]\n",
    "            temp_difference = max_temp - min_temp\n",
    "            temp_differences.append(temp_difference)\n",
    "\n",
    "# Convert the list to a numpy array\n",
    "temp_differences_array = np.array(temp_differences)\n",
    "\n",
    "# Reshape the array to have months, weeks, and days as columns\n",
    "reshaped_array = temp_differences_array.reshape(4, 4, 7)\n",
    "\n",
    "print(reshaped_array)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "efbbb14a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[ -4   5  -9   8  -5   4]\n",
      "  [ -2  -1   4  -2   7   1]\n",
      "  [ -1  -1  -3   8 -10   9]\n",
      "  [  3  -8   1   7  -6  -4]]\n",
      "\n",
      " [[ -8   3   3 -10   7  -6]\n",
      "  [ -8   2   3  -3   7  -6]\n",
      "  [  2   5  -5   4   3  -3]\n",
      "  [ -8   8  -5   5  -1   1]]\n",
      "\n",
      " [[  2  -3   1   2 -15  -4]\n",
      "  [  1  -2   4  -4 -13   2]\n",
      "  [ -1  -2   2   2 -18   3]\n",
      "  [ -3   0  -1   0 -12  -2]]\n",
      "\n",
      " [[ -3   1   1  -2   1 -12]\n",
      "  [ -1  -2   0   0 -10   1]\n",
      "  [  0  -1  -1   0  -8  -1]\n",
      "  [  0  -2  -1   2  -9  -1]]]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "# Calculate the difference between max temp of two consecutive days for each month\n",
    "temp_differences = []\n",
    "\n",
    "for month_idx in range(4):  # Iterate through all winter months\n",
    "    for week_idx in range(4):\n",
    "        for day_idx in range(6):  # Iterate through days except the last one\n",
    "            max_temp_today = data[month_idx, week_idx, day_idx, 1]\n",
    "            max_temp_tomorrow = data[month_idx, week_idx, day_idx + 1, 1]\n",
    "            temp_difference = max_temp_tomorrow - max_temp_today\n",
    "            temp_differences.append(temp_difference)\n",
    "\n",
    "# Convert the list to a numpy array\n",
    "temp_differences_array = np.array(temp_differences)\n",
    "\n",
    "# Reshape the array to have months, weeks, and days as columns\n",
    "reshaped_array = temp_differences_array.reshape(4, 4, 6)\n",
    "\n",
    "print(reshaped_array)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "1ac3b72f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[  2  -7   0   0   7  -4]\n",
      "  [  1  -6 -19  20   3  -2]\n",
      "  [  2  -4  -5   0   7   2]\n",
      "  [  5   1  -5   4  -4   6]]\n",
      "\n",
      " [[  5   1  -6   7  -5   1]\n",
      "  [ -8   8  -3  -5   8  -4]\n",
      "  [  5   1  -5   2   0  -1]\n",
      "  [ -5   7  -3  -2   0   5]]\n",
      "\n",
      " [[  2  -2   3  -5   0  20]\n",
      "  [  2  -6   3   1  -4  18]\n",
      "  [ -1  -4   5  -5   3  13]\n",
      "  [ -1   2   0   1   0  14]]\n",
      "\n",
      " [[  3 -21  18   3   1   8]\n",
      "  [  5  -3   1  -1   2   8]\n",
      "  [ -4   3   2  -5   4   8]\n",
      "  [  2  -2   0   1  -2  13]]]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "# Calculate the difference between min temp of two consecutive days for each month\n",
    "temp_differences = []\n",
    "\n",
    "for month_idx in range(4):  # Iterate through all winter months\n",
    "    for week_idx in range(4):\n",
    "        for day_idx in range(6):  # Iterate through days except the last one\n",
    "            min_temp_today = data[month_idx, week_idx, day_idx, 0]\n",
    "            min_temp_tomorrow = data[month_idx, week_idx, day_idx + 1, 0]\n",
    "            temp_difference = min_temp_tomorrow - min_temp_today\n",
    "            temp_differences.append(temp_difference)\n",
    "\n",
    "# Convert the list to a numpy array\n",
    "temp_differences_array = np.array(temp_differences)\n",
    "\n",
    "# Reshape the array to have months, weeks, and days as columns\n",
    "reshaped_array = temp_differences_array.reshape(4, 4, 6)\n",
    "\n",
    "print(reshaped_array)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "9262e9ca",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[  2  -7   0   0   7  -4   1  -6 -19  20   3  -2   2  -4  -5   0   7   2\n",
      "    5   1  -5   4  -4   6   5   1  -6   7  -5   1  -8   8  -3  -5   8  -4\n",
      "    5   1  -5   2   0  -1  -5   7  -3  -2   0   5   2  -2   3  -5   0  20\n",
      "    2  -6   3   1  -4  18  -1  -4   5  -5   3  13  -1   2   0   1   0  14\n",
      "    3 -21  18   3   1   8   5  -3   1  -1   2   8  -4   3   2  -5   4   8\n",
      "    2  -2   0   1  -2  13]\n",
      " [ -4   5  -9   8  -5   4  -2  -1   4  -2   7   1  -1  -1  -3   8 -10   9\n",
      "    3  -8   1   7  -6  -4  -8   3   3 -10   7  -6  -8   2   3  -3   7  -6\n",
      "    2   5  -5   4   3  -3  -8   8  -5   5  -1   1   2  -3   1   2 -15  -4\n",
      "    1  -2   4  -4 -13   2  -1  -2   2   2 -18   3  -3   0  -1   0 -12  -2\n",
      "   -3   1   1  -2   1 -12  -1  -2   0   0 -10   1   0  -1  -1   0  -8  -1\n",
      "    0  -2  -1   2  -9  -1]]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "# Calculate the difference between min temp of two consecutive days for each month\n",
    "min_temp_differences = []\n",
    "\n",
    "for month_idx in range(4):  # Iterate through all winter months\n",
    "    for week_idx in range(4):\n",
    "        for day_idx in range(6):  # Iterate through days except the last one\n",
    "            min_temp_today = data[month_idx, week_idx, day_idx, 0]\n",
    "            min_temp_tomorrow = data[month_idx, week_idx, day_idx + 1, 0]\n",
    "            temp_difference = min_temp_tomorrow - min_temp_today\n",
    "            min_temp_differences.append(temp_difference)\n",
    "\n",
    "# Calculate the difference between max temp of two consecutive days for each month\n",
    "max_temp_differences = []\n",
    "\n",
    "for month_idx in range(4):  # Iterate through all winter months\n",
    "    for week_idx in range(4):\n",
    "        for day_idx in range(6):  # Iterate through days except the last one\n",
    "            max_temp_today = data[month_idx, week_idx, day_idx, 1]\n",
    "            max_temp_tomorrow = data[month_idx, week_idx, day_idx + 1, 1]\n",
    "            temp_difference = max_temp_tomorrow - max_temp_today\n",
    "            max_temp_differences.append(temp_difference)\n",
    "\n",
    "# Convert the lists to numpy arrays\n",
    "min_temp_differences_array = np.array(min_temp_differences)\n",
    "max_temp_differences_array = np.array(max_temp_differences)\n",
    "\n",
    "# Combine the arrays using np.vstack\n",
    "combined_temp_differences = np.vstack((min_temp_differences_array, max_temp_differences_array))\n",
    "\n",
    "print(combined_temp_differences)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4abcc38e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}